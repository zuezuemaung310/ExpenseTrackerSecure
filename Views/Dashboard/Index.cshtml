@model ExpenseTracker.Models.DashboardViewModel

@{
    ViewData["Title"] = ViewData["Title"] ?? "Weekly Report Dashboard";
}

<div class="row">
    <div class="col-10 offset-1">
        <div class="row">
            <div class="col-10">
                <h2 class="text-center py-3">@ViewData["Title"]</h2>
            </div>
            <div class="col-2 py-3">
                <div class="dropdown">
                    <button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown">
                        View Reports
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Action("Index", "Dashboard", new { reportType = "Weekly" })">Weekly Overview</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Index", "Dashboard", new { reportType = "Monthly" })">Monthly Overview</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Index", "Dashboard", new { reportType = "Yearly" })">Yearly Overview</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Index", "Dashboard", new { reportType = "Summary" })">Summary Overview</a></li>
                    </ul>
                </div>
            </div>
        </div>

        
        <div class="row text-center">
            <!-- Total Income Card -->
            <div class="col-4">
                <div class="card text-white mb-3 rounded-5 shadow-sm p-3" style="background-color: #86B0F7;">
                    <div class="card-body d-flex justify-content-center align-items-center">
                        <div class="px-4 text-black">
                            <h4 class="mb-1">@Model.TotalIncome 円</h4>
                            <p class="mb-0">Total Income</p>
                        </div>
                        <img src="/images/income.png" alt="Income Icon" style="width: 50px; height: 50px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
                    </div>
                </div>
            </div>

            <!-- Total Expense Card -->
            <div class="col-4">
                <div class="card text-white mb-3 rounded-5 shadow-sm p-3" style="background-color: #FFD6D6;">
                    <div class="card-body d-flex justify-content-center align-items-center">
                        <div class="px-4 text-black">
                            <h4 class="mb-1">@Model.TotalExpense 円</h4>
                            <p class="mb-0">Total Expense</p>
                        </div>
                        <img src="/images/expense.png" alt="Expense Icon" style="width: 50px; height: 50px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
                    </div>
                </div>
            </div>

            <!-- Total Balance Card -->
            <div class="col-4">
                <div class="card text-white mb-3 rounded-5 shadow-sm p-3" style="background-color: #D6F8D6;">
                    <div class="card-body d-flex justify-content-center align-items-center">
                        <div class="px-4 text-black">
                            <h4 class="mb-1">@Model.TotalBalance 円</h4>
                            <p class="mb-0">Balance</p>
                        </div>
                        <img src="/images/balance.png" alt="Balance Icon" style="width: 50px; height: 50px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6 py-2 text-center">
                <h5>Spending Analysis</h5>
            </div>
            <div class="col-6 py-2 text-center">
                <h5>Income vs Expense</h5>
            </div>
        </div>
        <div class="row">
            <!-- Pie Chart -->
            <div class="col-6">
                <!-- Check if there are any expenses -->
                @if (Model.CategoryExpenses != null && Model.CategoryExpenses.Any(x => x.Amount > 0))
                {
                    <canvas id="expensePieChart"></canvas>
                }
                else
                {
                    <div class="d-flex justify-content-center align-items-center" style="height: 400px; border: 2px solid #ddd; border-radius: 15px; color: #6c757d;">
                        <p class="text-center text-dark mb-0" style="font-size: 18px; font-weight: bold;">No expenses available.</p>
                    </div>
                }
            </div>


            <!-- Spline Chart -->
            <div class="col-6 chart-container pt-2">
                    @if (Model.Transactions != null && Model.Transactions.Any(t => t.Income > 0 || t.Expense > 0))
                    {
                        <canvas id="splineChart"></canvas>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 400px;">
                            <p class="text-center mb-0 text-black" style="font-size: 18px; font-weight: bold;">No income & expense data available.</p>
                        </div>
                    }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Pie Chart (Expense Distribution)
        var expenseCtx = document.getElementById('expensePieChart').getContext('2d');
        var expensePieChart = new Chart(expenseCtx, {
            type: 'pie',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.CategoryExpenses.Select(x => x.Title))),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.CategoryExpenses.Select(x => x.Amount))),
                    backgroundColor: ['#FF5733','#3498DB', '#F1C40F','#2ECC71','#9B59B6','#E67E22','#1ABC9C','#E91E63','#00BCD4','#795548'],
                    borderColor: '#fff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            usePointStyle: true,
                            pointStyle: 'circle',
                            font: {
                                size: 12
                            }
                        }
                    }
                },
                layout: {
                    padding: {
                        top: 10,
                        bottom: 10
                    }
                }
            }
        });

        //Spline Chart (Income vs Expense)
        var splineCtx = document.getElementById('splineChart').getContext('2d');
        var splineChart = new Chart(splineCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Transactions.Select(x => x.Date.ToString("yyyy-MM-dd")))),
                datasets: [
                    {
                        label: 'Income',
                        data: @Html.Raw(Json.Serialize(Model.Transactions.Select(x => x.Income))),
                        borderColor: '#3498DB',
                        backgroundColor: '#3498DB',
                        pointStyle: 'circle',
                        pointRadius: 5,
                        fill: false,
                        tension: 0.4
                    },
                    {
                        label: 'Expense',
                        data: @Html.Raw(Json.Serialize(Model.Transactions.Select(x => x.Expense))),
                        borderColor: '#FF5733',
                        backgroundColor: '#FF5733',
                        pointStyle: 'circle',
                        pointRadius: 5,
                        fill: false,
                        tension: 0.4
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            font: {
                                size: 14,
                                weight: 'bold'
                            },
                            color: '#000'
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                        titleFont: { size: 14, weight: 'bold' },
                        bodyFont: { size: 12 },
                        padding: 10,
                        callbacks: {
                            label: function(context) {
                                let value = context.raw;
                                return context.dataset.label + ': ' + value.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#000',
                            font: { size: 12 }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    y: {
                        ticks: {
                            color: '#000',
                            font: { size: 12 },
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        },
                        beginAtZero: true
                    }
                },
                layout: {
                    padding: {
                        top: 20,
                        right: 20,
                        bottom: 20,
                        left: 20
                    }
                }
            }
        });
    </script>
}
