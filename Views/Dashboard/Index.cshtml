@model ExpenseTracker.Models.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<div class="row">
    <div class="col-10 offset-1">
        <div class="row">
            <!-- Total Income Card -->
            <div class="col-4">
                <div class="card text-white bg-success mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Total Income</h5>
                        <p class="card-text">@Model.TotalIncome 円</p>
                    </div>
                </div>
            </div>

            <!-- Total Expense Card -->
            <div class="col-4">
                <div class="card text-white bg-danger mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Total Expense</h5>
                        <p class="card-text">@Model.TotalExpense 円</p>
                    </div>
                </div>
            </div>

            <!-- Total Balance Card -->
            <div class="col-4">
                <div class="card text-white bg-primary mb-3">
                    <div class="card-body">
                        <h5 class="card-title">Balance</h5>
                        <p class="card-text">@Model.TotalBalance 円</p>
                    </div>
                </div>
            </div>
           
        </div>

        <div class="row py-5">
            <!-- Pie Chart -->
            <div class="col-6">
                <canvas id="expensePieChart"></canvas>
            </div>

            <!-- Spline Chart -->
            <div class="col-6 chart-container pt-4">
                <canvas id="splineChart"></canvas>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Pie Chart (Expense Distribution)
        var expenseCtx = document.getElementById('expensePieChart').getContext('2d');
        var expensePieChart = new Chart(expenseCtx, {
            type: 'pie',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.CategoryExpenses.Select(x => x.Title))),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.CategoryExpenses.Select(x => x.Amount))),
                    backgroundColor: ['#FF5733','#3498DB', '#F1C40F','#2ECC71','#9B59B6','#E67E22','#1ABC9C','#E91E63','#00BCD4','#795548'],
                    borderColor: '#fff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // Allows control over width and height
                plugins: {
                    legend: {
                        labels: {
                            usePointStyle: true, // Makes legend markers circular
                            pointStyle: 'circle',
                            font: {
                                size: 12 // Smaller font size for the legend
                            }
                        }
                    }
                },
            layout: {
                    padding: {
                        top: 10,
                        bottom: 10
                    }
                }
            }
        });

        // Spline Chart (Income vs Expense Over Time)
        var splineCtx = document.getElementById('splineChart').getContext('2d');
        var splineChart = new Chart(splineCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Transactions.Select(x => x.Date.ToString("yyyy-MM-dd")))),
                datasets: [
                    {
                        label: 'Income',
                        data: @Html.Raw(Json.Serialize(Model.Transactions.Select(x => x.Income))),
                        borderColor: '#3498DB', 
                        backgroundColor: '#3498DB',
                        pointStyle: 'circle',
                        pointRadius: 5, 
                        fill: false,
                        tension: 0.4 
                    },
                    {
                        label: 'Expense',
                        data: @Html.Raw(Json.Serialize(Model.Transactions.Select(x => x.Expense))),
                        borderColor: '#FF5733', 
                        backgroundColor: '#FF5733',
                        pointStyle: 'circle',
                        pointRadius: 5, 
                        fill: false,
                        tension: 0.4
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, 
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            usePointStyle: true, 
                            font: {
                                size: 14,
                                weight: 'bold'
                            },
                            color: '#000' 
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.7)', 
                        titleFont: { size: 14, weight: 'bold' },
                        bodyFont: { size: 12 },
                        padding: 10,
                        callbacks: {
                            label: function(context) {
                                let value = context.raw;
                                return context.dataset.label + ': ' + value.toLocaleString(); // Add commas
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#000', 
                            font: { size: 12 }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)' 
                        }
                    },
                    y: {
                        ticks: {
                            color: '#000',
                            font: { size: 12 },
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)' 
                        },
                        beginAtZero: true
                    }
                },
                layout: {
                    padding: {
                        top: 20,
                        right: 20,
                        bottom: 20,
                        left: 20
                    }
                }
            }
        });

    </script>
}
